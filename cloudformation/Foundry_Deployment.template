{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "Automated process to setup foundry exactly as the following guides dictate https://foundry-vtt-community.github.io/wiki/Self-Hosting-on-AWS/ and https://foundryvtt.com/article/nginx/. It also allows for optional snap-shots. Made by Lupert and Cat.",
	"Metadata": {
		"AWS::CloudFormation::Interface": {
			"ParameterGroups": [{
					"Label": {
						"default": "Base Configuration"
					},
					"Parameters": ["AdminUserName", "AdminUserPW", "FoundryDownloadLink", "InstanceKey", "InstanceType", "OptionalFixedIP", "S3BucketName", "UseExistingBucket", "TakeSnapshots", "SnapshotFrequency"]
				},
				{
					"Label": {
						"default": "SSL Configuration"
					},
					"Parameters": ["FullyQualifiedDomainName", "SubdomainName", "DomainRegistrar", "WebServerBool", "Email"]
				},
				{
					"Label": {
						"default": "GoDaddy, Google, and NameCheap"
					},
					"Parameters": ["APIKey", "APISecret"]
				},
				{
					"Label": {
						"default": "Google Web Server"
					},
					"Parameters": ["GoogleAPIKey", "GoogleAPISecret"]
				}
			]
		}
	},
	"Parameters": {
		"TakeSnapshots": {
			"Description": "Select True or False for whether you want to take snapshots of your instance. This is recommended but comes with a very minimal cost. This will retain 5 snapshots by default https://aws.amazon.com/ebs/pricing/",
			"Type": "String",
			"Default": "False",
			"AllowedValues": [
				"True",
				"False"
			]
		},
		"UseExistingBucket": {
			"Description": "If you are not comfortable working with AWS, just leave this default. If you already have a bucket setup to work with Foundry set this option to True, and then enter the existing bucket's name as the value for parameter S3BucketName. The bucket must already have the correct policy set for this to work.",
			"Type": "String",
			"AllowedValues": [
				"True",
				"False"
			],
			"Default": "False"
		},
		"FoundryDownloadLink": {
			"Description": "This will be your personal link to download Foundry. You can either use a Patreon link, or a Google Drive link.",
			"Type": "String"
		},
		"S3BucketName": {
			"Description": "Name for S3 bucket that will be created. This must be globally unique across all of AWS, so be a little creative. Must be all lowercase letters or numbers, no spaces, and no symbols expect dash (-).",
			"ConstraintDescription": "This must be globally unique across all of AWS, so be a little creative. Must be all lowercase letters or numbers, no spaces, and no symbols expect dash (-).",
			"Type": "String",
			"AllowedPattern": "^[a-z|0-9]+(-[a-z|0-9]+)*$"
		},
		"SnapshotFrequency": {
			"Description": "Decides how often you want to take snapshots. This value does not matter if you select False for TakeSnapshots",
			"Type": "String",
			"Default": "Weekly",
			"AllowedValues": [
				"Daily",
				"Weekly"
			]
		},
		"OptionalFixedIP": {
			"Description": "Allows you to have a dedicated public IP for your instance. This prevents the IP from changing everytime you shutdown the instance. EIPs have a conditional cost. If an EIP is in use, it is free. If the EIP is not in use a minimal cost is applied.",
			"Type": "String",
			"Default": "False",
			"AllowedValues": [
				"True",
				"False"
			]
		},
		"InstanceKey": {
			"Type": "AWS::EC2::KeyPair::KeyName",
			"Description": "An SSH keypair used to access your instance. This MUST be created manually.",
			"ConstraintDescription": "This MUST be created manually https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html#having-ec2-create-your-key-pair"
		},
		"AdminUserPW": {
			"Type": "String",
			"NoEcho": "true",
			"Description": "Password for admin user. Have a minimum of 8 characters and a maximum of 128 characters include a minimum of three of the following mix of character types: uppercase, lowercase, numbers, and symbols.",
			"ConstraintDescription": "Have a minimum of 8 characters and a maximum of 128 characters include a minimum of three of the following mix of character types: uppercase, lowercase, numbers, and symbols."
		},
		"AdminUserName": {
			"Type": "String",
			"Default": "AdminUser",
			"Description": "Username to be used for the Admin user."
		},
		"InstanceType": {
			"Description": "WebServer EC2 instance type",
			"Type": "String",
			"Default": "t2.micro",
			"AllowedValues": [
				"t2.micro",
				"t2.small",
				"t2.medium",
				"t2.large",
				"t3.micro",
				"m4.large",
				"m4.xlarge",
				"m4.2xlarge",
				"m4.4xlarge"
			],
			"ConstraintDescription": "Must be a valid EC2 instance type."
		},
		"FullyQualifiedDomainName": {
			"Description": "This is the name of the domain you have purchased. (e.g. mywebsitename.com).",
			"Type": "String",
			"AllowedPattern": "^[a-zA-Z0-9][a-zA-Z0-9-]{1,61}[a-zA-Z0-9](?:\\.[a-zA-Z]{2,})+$"
		},
		"SubdomainName": {
			"Description": "Name for the final URL to access foundry. Must be all lowercase, no letters, no spaces, and no symbols. (e.g. 'foundry' will become 'foundry.mywebsitename.com')",
			"Type": "String",
			"Default": "foundry",
			"AllowedPattern": "^[a-z]+$",
			"ConstraintDescription": "Must be all lowercase, no letters, no spaces, and no symbols."
		},
		"APIKey": {
			"Description": "API Key from your domain registrar. If you are using Namecheap this will just be the same value you entered for FullyQualifiedDomainName.",
			"Type": "String"
		},
		"APISecret": {
			"Description": "API Secret associated with the API Key above.",
			"Type": "String"
		},
		"Email": {
			"Description": "A valid email address is required for letsencrypt certs.",
			"Type": "String"
		},
		"DomainRegistrar": {
			"Description": "The domain registrar from which the domain was purchased from.",
			"Type": "String",
			"AllowedValues": [
				"google",
				"godaddy",
				"namecheap",
				"amazon"
			]
		},
		"WebServerBool": {
			"Description": "Set this to true if you would like your instance to act as a web server for your base domain as well as host Foundry. Refer to guide section for additional DNS steps.",
			"Type": "String",
			"AllowedValues": [
				"True",
				"False"
			],
			"Default": "False"
		},
		"GoogleAPIKey": {
			"Description": "This only matters if WebServer is set to true, and DomainRegistrar is set to google. If both of these conditions are not true ignore this parameter. Key for fully qualified domain name dynamic DNS.",
			"Default": "null",
			"Type": "String"
		},
		"GoogleAPISecret": {
			"Description": "This only matters if WebServerBool is set to true, and DomainRegistrar is set to google. If both of these conditions are not true ignore this parameter. Secret for fully qualified domain name dynamic DNS.",
			"Default": "null",
			"Type": "String"
		}
	},
	"Mappings": {
		"AMIRegionMap": {
			"us-east-1": {
				"AMILinux": "ami-0c94855ba95c71c99"
			},
			"us-east-2":{
				"AMILinux": "ami-03657b56516ab7912"
			},
			"us-west-1": {
				"AMILinux": "ami-0e4035ae3f70c400f"
			},
			"us-west-2": {
				"AMILinux": "ami-01ce4793a2f45922e"
			},
			"ap-southeast-2": {
				"AMILinux": "ami-0099823645f06b6a1"
			},
			"eu-north-1": {
				"AMILinux": "ami-02511cb3673b49e04"
			},
			"eu-west-1": {
				"AMILinux": "ami-08a2aed6e0a6f9c7d"
			},
			"eu-central-1": {
				"AMILinux": "ami-08c148bb835696b45"
			},
			"sa-east-1": {
				"AMILinux": "ami-02898a1921d38a50b"
			}
		}
	},
	"Conditions": {
		"CreateSnapshots": {
			"Fn::Equals": [{
					"Ref": "TakeSnapshots"
				},
				"True"
			]
		},
		"CreateRoute53": {
			"Fn::Equals": [{
					"Ref": "DomainRegistrar"
				},
				"amazon"
			]
		},
		"CreateWebServer": {
			"Fn::Equals": [{
				"Ref": "WebServerBool"
			},
			"True"
		]
		},
		"Route53WebServer": {
			"Fn::And": [
				{
					"Condition": "CreateRoute53"
				}, 
				{
					"Condition": "CreateWebServer" 
				}
			]
		},
		"NoExistingS3": {
			"Fn::Equals": [{
					"Ref": "UseExistingBucket"
				},
				"False"
			]
		},
		"CreateEIP": {
			"Fn::Equals": [{
					"Ref": "OptionalFixedIP"
				},
				"True"
			]
		},
		"DailyCheck": {
			"Fn::Equals": [{
					"Ref": "SnapshotFrequency"
				},
				"Daily"
			]
		},
		"WeeklyCheck": {
			"Fn::Equals": [{
					"Ref": "SnapshotFrequency"
				},
				"Weekly"
			]
		},
		"TakeSnapshots": {
			"Fn::Equals": [{
					"Ref": "TakeSnapshots"
				},
				"True"
			]
		}
	},
	"Resources": {
		"FoundryServerSG": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "-",
				"SecurityGroupIngress": [{
					"IpProtocol": "tcp",
					"FromPort": 30000,
					"ToPort": 30000,
					"CidrIp": "0.0.0.0/0"
				}]
			}
		},
		"SecurityGroupIngressVoice": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"GroupId": {
					"Fn::GetAtt": ["FoundryServerSG", "GroupId"]
				},
				"CidrIp": "0.0.0.0/0",
				"FromPort": 80,
				"IpProtocol": "tcp",
				"ToPort": 80
			}
		},
		"SecurityGroupIngressVoiceRange": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"GroupId": {
					"Fn::GetAtt": ["FoundryServerSG", "GroupId"]
				},
				"CidrIp": "0.0.0.0/0",
				"FromPort": 49152,
				"IpProtocol": "tcp",
				"ToPort": 65535
			}
		},
		"SecurityGroupIngressHTTP": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"GroupId": {
					"Fn::GetAtt": ["FoundryServerSG", "GroupId"]
				},
				"CidrIp": "0.0.0.0/0",
				"FromPort": 33478,
				"IpProtocol": "tcp",
				"ToPort": 33478
			}
		},
		"SecurityGroupIngressHTTPS": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"GroupId": {
					"Fn::GetAtt": ["FoundryServerSG", "GroupId"]
				},
				"CidrIp": "0.0.0.0/0",
				"FromPort": 443,
				"IpProtocol": "tcp",
				"ToPort": 443
			}
		},
		"Route53RSFoundry": {
			"Type": "AWS::Route53::RecordSet",
			"Condition": "CreateRoute53",
			"Properties": {
				"Name": { "Fn::Sub" : "${SubdomainName}.${FullyQualifiedDomainName}" },
				"Type": "A",
				"HostedZoneName": { "Fn::Sub": "${FullyQualifiedDomainName}." },
				"ResourceRecords": [{ "Fn::GetAtt": ["FoundryServer", "PublicIp"]}],
				"TTL": "60"
			}
		},
		"Route53RSWeb": {
			"Type": "AWS::Route53::RecordSet",
			"Condition": "Route53WebServer",
			"Properties": {
				"Name": { "Ref": "FullyQualifiedDomainName" },
				"Type": "A",
				"HostedZoneName": { "Fn::Sub": "${FullyQualifiedDomainName}." },
				"ResourceRecords": [{ "Fn::GetAtt": ["FoundryServer", "PublicIp"]}],
				"TTL": "60"
			}
		},
		"Route53RSWebWWW": {
			"Type": "AWS::Route53::RecordSet",
			"Condition": "Route53WebServer",
			"Properties": {
				"Name": {"Fn::Sub": "www.${FullyQualifiedDomainName}" },
				"Type": "CNAME",
				"HostedZoneName": {"Fn::Sub": "${FullyQualifiedDomainName}." },
				"ResourceRecords": [ { "Ref": "FullyQualifiedDomainName" } ],
				"TTL": "60"
			}
		},
		"FoundryBucket": {
			"Condition": "NoExistingS3",
			"Type": "AWS::S3::Bucket",
			"Properties": {
				"CorsConfiguration": {
					"CorsRules": [{
						"AllowedHeaders": [
							"*"
						],
						"AllowedMethods": [
							"GET", "POST", "HEAD"
						],
						"MaxAge": "3000",
						"AllowedOrigins": [
							"*"
						]
					}]
				},
				"AccessControl": "PublicRead",
				"BucketName": {
					"Ref": "S3BucketName"
				}
			}
		},
		"FoundryBucketPolicy": {
			"Condition": "NoExistingS3",
			"Type": "AWS::S3::BucketPolicy",
			"Properties": {
				"Bucket": {
					"Ref": "FoundryBucket"
				},
				"PolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [{
						"Sid": "PublicReadGetObject",
						"Action": "s3:GetObject",
						"Effect": "Allow",
						"Resource": {
							"Fn::Sub": "arn:aws:s3:::${S3BucketName}/*"
						},
						"Principal": "*"
					}]
				}
			}
		},
		"AdminUser": {
			"Type": "AWS::IAM::User",
			"Properties": {
				"LoginProfile": {
					"Password": {
						"Ref": "AdminUserPW"
					}
				},
				"ManagedPolicyArns": [
					"arn:aws:iam::aws:policy/AdministratorAccess"
				],
				"UserName": {
					"Ref": "AdminUserName"
				}
			}
		},
		"UserKey": {
			"Type": "AWS::IAM::AccessKey",
			"Properties": {
				"Status": "Active",
				"UserName": {
					"Ref": "FoundryUser"
				}
			}
		},
		"FoundryUser": {
			"Type": "AWS::IAM::User",
			"Properties": {
				"Policies": [{
					"PolicyName": "S3Foundry",
					"PolicyDocument": {
						"Version": "2012-10-17",
						"Statement": [{
								"Sid": "ManageObjects",
								"Effect": "Allow",
								"Action": [
									"s3:PutObject",
									"s3:GetObject",
									"s3:ListBucket",
									"s3:DeleteObject",
									"s3:PutObjectAcl"
								],
								"Resource": [
									{ "Fn::Sub": "arn:aws:s3:::${S3BucketName}/*" },
									{ "Fn::Sub": "arn:aws:s3:::${S3BucketName}" }
								]
							},
							{
								"Sid": "ListBuckets",
								"Effect": "Allow",
								"Action": "s3:ListAllMyBuckets",
								"Resource": "*"
							}
						]
					}
				}]
			}
		},
		"FoundryServer": {
			"Type": "AWS::EC2::Instance",
			"Properties": {
				"KeyName": {
					"Ref": "InstanceKey"
				},
				"ImageId": {
					"Fn::FindInMap": [
						"AMIRegionMap",
						{
							"Ref": "AWS::Region"
						},
						"AMILinux"
					]
				},
				"InstanceType": {
					"Ref": "InstanceType"
				},
				"IamInstanceProfile": {
					"Ref": "InstanceProfile"
				},
				"SecurityGroupIds": [{
					"Ref": "FoundryServerSG"
				}],
				"Tags": [{
					"Key": "Name",
					"Value": "FoundryServer"
				}],
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": [
							"",
							[
								"#!/bin/sh\n",
								"AWS_AVAIL_ZONE=$(curl http://169.254.169.254/latest/meta-data/placement/availability-zone)\n",
								"AWS_REGION=${AWS_AVAIL_ZONE::-1}\n",
								"AWS_INSTANCE_ID=$(curl http://169.254.169.254/latest/meta-data/instance-id)\n",
								"ROOT_VOLUME_IDS=$(aws ec2 describe-instances --region $AWS_REGION --instance-id $AWS_INSTANCE_ID --output text --query Reservations[0].Instances[0].BlockDeviceMappings[0].Ebs.VolumeId)\n",
								"aws ec2 create-tags --resources $ROOT_VOLUME_IDS --region $AWS_REGION --tags Key=Snapshot,Value=true\n",
								"curl --silent --location https://rpm.nodesource.com/setup_12.x | sudo bash -\n",
								"sudo yum install -y git\n",
								"cd /\n",
								"git clone https://github.com/cat-box/aws-foundry-ssl.git\n",
								"mkdir /foundry /foundrydata /aws-foundry-ssl/variables /foundryssl\n",
								
								"echo '#!/bin/bash' >> /aws-foundry-ssl/variables/foundry_variables.sh\n",
								"echo 'foundry_download_link=", { "Ref": "FoundryDownloadLink" }, "' >> /aws-foundry-ssl/variables/foundry_variables.sh\n",
								"echo 'access_key_id=", { "Ref": "UserKey" }, "' >> /aws-foundry-ssl/variables/foundry_variables.sh\n",
								"echo 'secret_access_key=", { "Fn::GetAtt": ["UserKey", "SecretAccessKey"] }, "' >> /aws-foundry-ssl/variables/foundry_variables.sh\n",
								"echo 'region=", { "Ref": "AWS::Region" }, "' >> /aws-foundry-ssl/variables/foundry_variables.sh\n",

								"echo '#!/bin/bash' >> /foundryssl/variables.sh\n",
								"echo 'domain_registrar=", { "Ref": "DomainRegistrar" }, "' >> /foundryssl/variables.sh\n",
								"echo 'api_key=", { "Ref": "APIKey" }, "' >> /foundryssl/variables.sh\n",
								"echo 'api_secret=", { "Ref": "APISecret" }, "' >> /foundryssl/variables.sh\n",
								"echo 'fqdn=", { "Ref": "FullyQualifiedDomainName" }, "' >> /foundryssl/variables.sh\n",
								"echo 'subdomain=", { "Ref": "SubdomainName" }, "' >> /foundryssl/variables.sh\n",
								"echo 'email=", { "Ref": "Email" }, "' >> /foundryssl/variables.sh\n",
								"echo 'webserver_bool=", { "Ref": "WebServerBool" }, "' >> /foundryssl/variables.sh\n",
								"echo 'webserver_user=", { "Ref": "GoogleAPIKey" }, "' >> /foundryssl/variables.sh\n",
								"echo 'webserver_pass=", { "Ref": "GoogleAPISecret" }, "' >> /foundryssl/variables.sh\n",	
								"sudo chown root:root /foundryssl/variables.sh\n",
								"sudo chmod 700 /foundryssl/variables.sh\n",

								"sudo chmod -R a+x /aws-foundry-ssl\n",
								
								"/aws-foundry-ssl/scripts/global/install.sh\n"
							]
						]
					}
				}
			}
		},
		"InstanceRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [{
						"Effect": "Allow",
						"Principal": {
							"Service": [
								"ec2.amazonaws.com"
							]
						},
						"Action": [
							"sts:AssumeRole"
						]
					}]
				},
				"Policies": [{
					"PolicyName": "EC2Manager",
					"PolicyDocument": {
						"Version": "2012-10-17",
						"Statement": [
							{
								"Sid": "VisualEditor0",
								"Effect": "Allow",
								"Action": [
									"ec2:CopySnapshot",
									"ec2:DescribeInstances",
									"ec2:ModifyVolumeAttribute",
									"ec2:CreateKeyPair",
									"route53:GetHostedZone",
									"ec2:CreateImage",
									"ec2:CopyImage",
									"ec2:DescribeSnapshots",
									"ec2:GetConsoleScreenshot",
									"ec2:DescribeInternetGateways",
									"ec2:DescribeVolumeStatus",
									"ec2:ModifySnapshotAttribute",
									"ec2:StartInstances",
									"ec2:DescribeVolumes",
									"route53:ListResourceRecordSets",
									"ec2:DescribeAccountAttributes",
									"route53:GetHostedZoneCount",
									"route53:UpdateHostedZoneComment",
									"ec2:ImportImage",
									"ec2:DescribeKeyPairs",
									"ec2:DescribeNetworkAcls",
									"ec2:DescribeRouteTables",
									"ec2:ModifyVolume",
									"ec2:CancelExportTask",
									"route53:CreateHostedZone",
									"ec2:DisableFastSnapshotRestores",
									"ec2:ImportKeyPair",
									"ec2:CreateTags",
									"route53:ChangeResourceRecordSets",
									"ec2:RunInstances",
									"ec2:StopInstances",
									"ec2:DescribeVolumeAttribute",
									"ec2:CreateVolume",
									"ec2:DescribeImportSnapshotTasks",
									"ec2:CreateSnapshots",
									"ec2:DescribeImageAttribute",
									"ec2:DescribeInstanceTypes",
									"ec2:DescribeSubnets",
									"ec2:ExportImage",
									"ec2:AttachVolume",
									"ec2:ImportVolume",
									"ec2:DeleteSnapshot",
									"ec2:DeleteTags",
									"ec2:DescribeInstanceAttribute",
									"ec2:DescribeRegions",
									"ec2:CreateVpc",
									"ec2:DescribeVpcAttribute",
									"ec2:GetConsoleOutput",
									"ec2:EnableFastSnapshotRestores",
									"ec2:DescribeAvailabilityZones",
									"ec2:CreateSecurityGroup",
									"ec2:CreateSnapshot",
									"route53:DeleteHostedZone",
									"ec2:DescribeInstanceStatus",
									"ec2:DescribeTags",
									"ec2:ResetSnapshotAttribute",
									"ec2:ImportSnapshot",
									"route53:ListHostedZones",
									"ec2:DescribeImportImageTasks",
									"ec2:DescribeNatGateways",
									"ec2:DescribeInstanceEventNotificationAttributes",
									"ec2:DescribeSecurityGroups",
									"ec2:DescribeImages",
									"ec2:DescribeSecurityGroupReferences",
									"ec2:DescribeVpcs",
									"ec2:CancelImportTask"
								],
								"Resource": "*"
							}
						]
					}
				}]
			}
		},
		"InstanceProfile": {
			"Type": "AWS::IAM::InstanceProfile",
			"Properties": {
				"Roles": [{
					"Ref": "InstanceRole"
				}]
			}
		},
		"InstanceEIP": {
			"Condition": "CreateEIP",
			"Type": "AWS::EC2::EIP",
			"Properties": {
				"InstanceId": {
					"Ref": "FoundryServer"
				}
			}
		},
		"SnapshotPolicy": {
			"Condition": "CreateSnapshots",
			"Type": "AWS::DLM::LifecyclePolicy",
			"Properties": {
				"State": "ENABLED",
				"Description": "Foundry Server snapshot policy",
				"ExecutionRoleArn": {
					"Fn::GetAtt": ["InstanceRole", "Arn"]
				},
				"PolicyDetails": {
					"PolicyType": "EBS_SNAPSHOT_MANAGEMENT",
					"ResourceTypes": [
						"VOLUME"
					],
					"TargetTags": [{
						"Key": "Snapshot",
						"Value": "true"
					}],
					"Schedules": [{
						"Fn::If": [
							"DailyCheck",
							{
								"Name": "Snapshots",
								"CreateRule": {
									"CronExpression": "cron(0 12 * * ? *)"
								},
								"RetainRule": {
									"Count": 5
								},
								"CopyTags": true
							},
							{
								"Name": "Snapshots",
								"CreateRule": {
									"CronExpression": "cron(0 12 ? * 2 *)"
								},
								"RetainRule": {
									"Count": 5
								},
								"CopyTags": true
							}
						]
					}]
				}
			}
		}
	}
}
